name: Deploy Container

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - dev
env:
  DEBUG: true
  PORT: 8080

  DB_DRIVER: "mysql"
  DB_HOST: "mysql"
  DB_PORT: 3306
  DB_DATABASE: "first_go_api_db"
  DB_DATABASE_TESTING: "first_go_api_db_test"
  DB_USER: "encang-cutbray"
  DB_PASSWORD: "secret214"
  DB_ROOT_PASSWORD: "secret214"

  CACHE_DRIVER: "redis"
  CACHE_PORT: "6379"
  CACHE_USER: 
  CACHE_PASSWORD: 

  GOOSE_DRIVER: "mysql"
  GOOSE_DBSTRING: "root:secret214@tcp(mysql:3306)/first_go_api_db"
  GOOSE_MIGRATION_DIR: "./pkg/migration"
jobs:
  test:
    runs-on: ubuntu-latest

    container:
      image: golang:1.24-alpine
      env:
        PATH: /root/go/bin:/usr/local/go/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
    
    services:
      mysql:
        image: mariadb:10.6.21
        env:
          MYSQL_ROOT_PASSWORD: ${{ env.DB_ROOT_PASSWORD }}
          MYSQL_DATABASE: ${{ env.DB_DATABASE }}
          MYSQL_USER: ${{ env.DB_USER }}
          MYSQL_PASSWORD: ${{ env.DB_PASSWORD }}
        ports:
          - "3306:3306"
        volumes:
          - ./docker/mysql:/docker-entrypoint-initdb.d
        
        options: >-
          --health-cmd "mysqladmin ping -h localhost"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Log go version
        run: go version

      - name: Checkout code
        uses: actions/checkout@v5

      - name: Install make, curl,tar
        run: |
          apk add --no-cache make curl tar
          go install github.com/pressly/goose/v3/cmd/goose@v3.24.3

      - name: Initialize Database
        run: |
          echo "Database service is ready. Initializing database..."
          apk add --no-cache mariadb-client
          
          # Tambahkan flag --ssl-mode=DISABLED di sini
          mariadb -h mysql -P 3306 -u root -p"${{ env.DB_ROOT_PASSWORD }}" --skip_ssl < ./docker/mysql/init.sql
          
          echo "Database initialized successfully."

      - name: Cache go modules
        uses: actions/cache@v4
        id: cache
        with:
          path: |
            $HOME/.cache/go-build
            /go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install dependencies
        run: make deps

      - name: Run tests
        run: make test-verbose

      - name: Build the application
        env:
            DEBUG: false
        run: make build

      - name: Run and test application
        run: |
          cd bin && ./main &
          SERVER_PID=$!
          sleep 3
          curl -f http://localhost:8080/health
          kill $SERVER_PID

      - name: Output Step
        run: echo Cached:${{ steps.cache.outputs.cache-hit == 'true'}}

  build:
    needs: test
    runs-on: ubuntu-latest

    container:
      image: golang:1.24-alpine
      env:
        DEBUG: false
    steps:
      - name: Log go version
        run: go version

      - name: Checkout code
        uses: actions/checkout@v5

      - name: Install make, curl, and tar
        run: |
          apk add --no-cache make curl tar coreutils

      - name: Cache go modules
        uses: actions/cache@v4
        id: cache
        with:
          path: |
            $HOME/.cache/go-build
            /go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run:  go mod download

      - name: Build the application
        run: make build

      - name: Check SHA256 of binary
        run: sha256sum bin/main

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: binary-file
          path: bin

  deploy:
    needs: build
    if: github.ref == 'refs/heads/main'
    runs-on: [self-hosted, Linux]
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Create .prod.env file from secrets
        run: echo "${{ secrets.PROD_ENV }}" > .prod.env

      - name: Remove old container if exists
        run: |
          docker rm -f first_go_api_prod || true

      - name: Build and Run Production App with Docker Compose
        run: |
          echo $(pwd)
          docker compose -f docker-compose.yml up -d --build app

      - name: Deploy Finished Marker
        run: echo "=== DEPLOYMENT SELESAI ==="

      # - name: Get build artifacts
      #   uses: actions/download-artifact@v4
      #   with:
      #     name: binary-file
      #     path: bin

      # - name: Check file exists
      #   run: ls -la bin

      # - name: Check SHA256 of binary
      #   run: sha256sum bin/main
